---
- name: Download and install Firefox
  block:

    - name: "Download {{ edition.name }} GPG signature"
      ansible.builtin.get_url:
        url: "{{ firefox_head.location }}.asc"
        dest: "{{ firefox_download }}/{{ edition.product }}/{{ firefox_head.location | basename }}.asc"

    - name: "Download {{ edition.name }} GPG signature"
      ansible.builtin.get_url:
        url: "{{ firefox_head.location }}"
        dest: "{{ firefox_download }}/{{ edition.product }}/{{ firefox_head.location | basename }}"

    - name: "Check the {{ edition.name }} GPG signature"
      ansible.builtin.command: "gpg --verify {{ firefox_download }}/{{ edition.product }}/{{ firefox_head.location | basename }}.asc"
      check_mode: false
      changed_when: false
      register: firefox_gpg_verify
      failed_when: >
        ( firefox_gpg_verify.rc != 0 ) or
        ( "Good signature from" not in firefox_gpg_verify.stderr )

    - name: "Debug {{ edition.name }} GPG verify result"
      ansible.builtin.debug:
        var: firefox_gpg_verify
        verbosity: 2

    - name: "Directory present to unarchive {{ edition.name }} into present"
      ansible.builtin.file:
        path: "{{ firefox_download }}/{{ edition.product }}/{{ firefox_latest }}"
        state: directory
        mode: 0700

    - name: "Unarchive {{ edition.name }}"
      ansible.builtin.unarchive:
        src: "{{ firefox_download }}/{{ edition.product }}/{{ firefox_head.location | basename }}"
        dest: "{{ firefox_download }}/{{ edition.product }}/{{ firefox_latest }}"
        remote_src: true

    - name: "Check if {{ edition.name }} has already been installed"
      ansible.builtin.stat:
        path: "{{ firefox_path }}/{{ edition.product }}"
      register: firefox_dest

    - name: "Move the old {{ edition.name }} out of the way and install the new version"
      ansible.builtin.shell: |
        set -e -o pipefail
        mv {{ firefox_path }}/{{ edition.product }} {{ firefox_path }}/{{ edition.product }}_$(date +%Y-%m-%d-%H-%M-%S)
        mv {{ firefox_download }}/{{ edition.product }}/{{ firefox_latest }}/firefox {{ firefox_path }}/{{ edition.product }}
      args:
        executable: "{{ firefox_bash.stdout }}"
      when: firefox_dest.stat.exists

    - name: "Install {{ edition.name }}"
      ansible.builtin.shell: |
        set -e -o pipefail
        mv {{ firefox_download }}/{{ edition.product }}/{{ firefox_latest }}/firefox {{ firefox_path }}/{{ edition.product }}
      args:
        executable: "{{ firefox_bash.stdout }}"
      when: not firefox_dest.stat.exists

    - name: "{{ edition.name }} symlink in place"
      ansible.builtin.file:
        state: link
        src: "{{ firefox_path }}/{{ edition.product }}/firefox"
        dest: "{{ firefox_bin }}/{{ edition.symlink }}"

    - name: "Append a CHANGELOG message to say that {{ edition.name }} has been updated to the latest version"
      set_fact:
        firefox_changelog: "{{ firefox_changelog }} + [ 'Installed {{ edition.name }} to version {{ firefox_latest }}' ]"

  tags:
    - firefox
...
